name: CITest

on:
  pull_request:
    types: [opened, synchronize]
  pull_request_target:
    types: [labeled]
  push: { branches: [main] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  testAllModes:
    name: CI test in ${{ matrix.testMode }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    if: (github.event_name != 'pull_request_target' && !contains(github.event.pull_request.labels.*.name, 'run to test')) || contains(github.event.pull_request.labels.*.name, 'run to test')
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - CITest
        unityVersion:
          - 2020.3.48f1
          - 2021.3.33f1
          - 2022.3.16f1
        testMode:
          - editmode
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-
      - name: setup
        run: cp -rf "NuGetImporterForUnity/Packages/NuGet Importer" "CITest/Packages/NuGet Importer" && rm -rf "CITest/Packages/NuGet Importer/Tests" && rm -f "CITest/Packages/NuGet Importer/Tests.meta"
      - uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        id: tests
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }} with ${{ matrix.unityVersion }}
          path: ${{ steps.tests.outputs.artifactsPath }}
